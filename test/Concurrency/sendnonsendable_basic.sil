// RUN: %target-sil-opt -transfer-non-sendable -enable-experimental-feature RegionBasedIsolation -strict-concurrency=complete %s -verify

sil_stage raw

import Swift

class NonSendableKlass {}

sil @transferKlass : $@convention(thin) @async (@guaranteed NonSendableKlass) -> ()
sil @transferIndirect : $@convention(thin) @async <τ_0_0> (@in_guaranteed τ_0_0) -> ()
sil @useKlass : $@convention(thin) (@guaranteed NonSendableKlass) -> ()
sil @constructKlass : $@convention(thin) () -> @owned NonSendableKlass

enum FakeOptional<T> {
case none
case some(T)
}

/////////////////
// MARK: Tests //
/////////////////

sil [ossa] @simple : $@convention(thin) @async () -> () {
bb0:
  %0 = function_ref @constructKlass : $@convention(thin) () -> @owned NonSendableKlass
  %1 = apply %0() : $@convention(thin) () -> @owned NonSendableKlass
  %2 = function_ref @transferKlass : $@convention(thin) @async (@guaranteed NonSendableKlass) -> ()
  apply [caller_isolation=nonisolated] [callee_isolation=global_actor] %2(%1) : $@convention(thin) @async (@guaranteed NonSendableKlass) -> ()
  // expected-warning @-1 {{passing argument of non-sendable type 'NonSendableKlass' from nonisolated context to global actor '<null>'-isolated context at this call site could yield a race with accesses later in this function}}
  %3 = function_ref @useKlass : $@convention(thin) (@guaranteed NonSendableKlass) -> ()
  apply %3(%1) : $@convention(thin) (@guaranteed NonSendableKlass) -> ()
  // expected-note @-1 {{access here could race}}
  destroy_value %1 : $NonSendableKlass
  %9999 = tuple ()
  return %9999 : $()
}

sil [ossa] @yield_error_test : $@yield_once @convention(thin) @async () -> @yields @in_guaranteed NonSendableKlass {
bb0:
  %0 = function_ref @constructKlass : $@convention(thin) () -> @owned NonSendableKlass
  %1 = apply %0() : $@convention(thin) () -> @owned NonSendableKlass
  %2 = alloc_stack $NonSendableKlass
  %3 = store_borrow %1 to %2 : $*NonSendableKlass
  %4 = function_ref @transferIndirect : $@convention(thin) @async <τ_0_0> (@in_guaranteed τ_0_0) -> ()
  apply [caller_isolation=nonisolated] [callee_isolation=global_actor] %4<NonSendableKlass>(%3) : $@convention(thin) @async <τ_0_0> (@in_guaranteed τ_0_0) -> ()
  // expected-warning @-1 {{passing argument of non-sendable type 'NonSendableKlass' from nonisolated context to global actor '<null>'-isolated context at this call site could yield a race with accesses later in this function}}
  yield %3 : $*NonSendableKlass, resume bb1, unwind bb2
  // expected-note @-1 {{access here could race}}

bb1:
  end_borrow %3 : $*NonSendableKlass
  dealloc_stack %2 : $*NonSendableKlass
  destroy_value %1 : $NonSendableKlass
  %9999 = tuple ()
  return %9999 : $()

bb2:
  end_borrow %3 : $*NonSendableKlass
  dealloc_stack %2 : $*NonSendableKlass
  destroy_value %1 : $NonSendableKlass
  unwind
}

sil [ossa] @switch_enum_addr_inst : $@yield_once @convention(thin) @async () -> () {
bb0:
  %0 = function_ref @constructKlass : $@convention(thin) () -> @owned NonSendableKlass
  %1 = apply %0() : $@convention(thin) () -> @owned NonSendableKlass
  %2 = alloc_stack $FakeOptional<NonSendableKlass>
  %1a = enum $FakeOptional<NonSendableKlass>, #FakeOptional.some!enumelt, %1 : $NonSendableKlass
  store %1a to [init] %2 : $*FakeOptional<NonSendableKlass>
  %4 = function_ref @transferIndirect : $@convention(thin) @async <τ_0_0> (@in_guaranteed τ_0_0) -> ()
  apply [caller_isolation=nonisolated] [callee_isolation=global_actor] %4<FakeOptional<NonSendableKlass>>(%2) : $@convention(thin) @async <τ_0_0> (@in_guaranteed τ_0_0) -> ()
  // expected-warning @-1 {{passing argument of non-sendable type 'FakeOptional<NonSendableKlass>' from nonisolated context to global actor '<null>'-isolated context at this call site could yield a race with accesses later in this function}}
  switch_enum_addr %2 : $*FakeOptional<NonSendableKlass>, case #FakeOptional.some!enumelt: bb1, case #FakeOptional.none!enumelt: bb2
  // expected-note @-1 {{access here could race}}

bb1:
  destroy_addr %2 : $*FakeOptional<NonSendableKlass>
  dealloc_stack %2 : $*FakeOptional<NonSendableKlass>
  br bb3

bb2:
  destroy_addr %2 : $*FakeOptional<NonSendableKlass>
  dealloc_stack %2 : $*FakeOptional<NonSendableKlass>
  br bb3

bb3:
  %9999 = tuple ()
  return %9999 : $()
}

sil [ossa] @explicit_copy_value_test : $@convention(thin) @async () -> () {
bb0:
  %0 = function_ref @constructKlass : $@convention(thin) () -> @owned NonSendableKlass
  %1 = apply %0() : $@convention(thin) () -> @owned NonSendableKlass
  %2 = function_ref @transferKlass : $@convention(thin) @async (@guaranteed NonSendableKlass) -> ()
  %1a = explicit_copy_value %1 : $NonSendableKlass
  apply [caller_isolation=nonisolated] [callee_isolation=global_actor] %2(%1a) : $@convention(thin) @async (@guaranteed NonSendableKlass) -> ()
  // expected-warning @-1 {{passing argument of non-sendable type 'NonSendableKlass' from nonisolated context to global actor '<null>'-isolated context at this call site could yield a race with accesses later in this function}}
  %3 = function_ref @useKlass : $@convention(thin) (@guaranteed NonSendableKlass) -> ()
  apply %3(%1) : $@convention(thin) (@guaranteed NonSendableKlass) -> ()
  // expected-note @-1 {{access here could race}}
  destroy_value %1a : $NonSendableKlass
  destroy_value %1 : $NonSendableKlass
  %9999 = tuple ()
  return %9999 : $()
}
