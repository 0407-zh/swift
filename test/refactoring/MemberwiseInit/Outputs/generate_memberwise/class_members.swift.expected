class Person {
internal init(firstName: String? = nil, lastName: String? = nil, age: Int? = nil, planet: String = "Earth", solarSystem: String = "Milky Way", avgHeight: Int = 175, location: @escaping () -> Place = { fatalError() }, secondLocation: (() -> Place)? = nil, wrapped: String = "") {
self.firstName = firstName
self.lastName = lastName
self.age = age
self.planet = planet
self.solarSystem = solarSystem
self.avgHeight = avgHeight
self.location = location
self.secondLocation = secondLocation
self.wrapped = wrapped
}

  var firstName: String!
  var lastName: String!
  var age: Int!
  var planet = "Earth", solarSystem = "Milky Way"
  var avgHeight = 175
  let line = #line, file = #file, handle = #dsohandle
  lazy var idea: Idea = { fatalError() }()
  var location: () -> Place = { fatalError() }
  var secondLocation: (() -> Place)!
  @MyWrapper var wrapped: String = ""
  var computed: String { "hi" }
}

struct Place {
  typealias Callback = () -> ()
  let person: Person
  let street: String
  let apartment: Optional<String>
  let city: String
  let state: String
  let postalCode: Int
  let plusFour: Int?
  let callback: Callback
  @MyWrapper var wrapped: String
}

protocol Thing {
  var idea: Idea { get }
}

enum Idea {
  var subject: String { fatalError() }
}

@propertyWrapper
struct MyWrapper {
  let wrappedValue: String
}




